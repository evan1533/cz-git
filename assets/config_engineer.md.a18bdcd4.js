import{_ as e,o as t,c as o,a as i}from"./app.fab02784.js";const m=JSON.parse('{"title":"Engineering Related","description":"","frontmatter":{"title":"Engineering Related","sidebarDepth":1,"lastUpdated":true,"sitemap":{"priority":0.6}},"headers":[{"level":2,"title":"alias","slug":"alias"},{"level":2,"title":"scopes","slug":"scopes"},{"level":2,"title":"scopeOverrides","slug":"scopeoverrides"},{"level":2,"title":"scopeFilters","slug":"scopefilters"},{"level":2,"title":"enableMultipleScopes","slug":"enablemultiplescopes"},{"level":2,"title":"scopeEnumSeparator","slug":"scopeenumseparator"},{"level":2,"title":"allowCustomScopes","slug":"allowcustomscopes"},{"level":2,"title":"allowEmptyScopes","slug":"allowemptyscopes"},{"level":2,"title":"markBreakingChangeMode","slug":"markbreakingchangemode"},{"level":2,"title":"allowBreakingChanges","slug":"allowbreakingchanges"},{"level":2,"title":"upperCaseSubject","slug":"uppercasesubject"},{"level":2,"title":"breaklineNumber","slug":"breaklinenumber"},{"level":2,"title":"breaklineChar","slug":"breaklinechar"},{"level":2,"title":"skipQuestions","slug":"skipquestions"},{"level":2,"title":"issuePrefixs","slug":"issueprefixs"},{"level":2,"title":"allowCustomIssuePrefixs","slug":"allowcustomissueprefixs"},{"level":2,"title":"allowEmptyIssuePrefixs","slug":"allowemptyissueprefixs"},{"level":2,"title":"maxHeaderLength","slug":"maxheaderlength"},{"level":2,"title":"maxSubjectLength","slug":"maxsubjectlength"},{"level":2,"title":"minSubjectLength","slug":"minsubjectlength"}],"relativePath":"config/engineer.md","lastUpdated":1658542054000}'),s={name:"config/engineer.md"},l=i('<h1 id="options-engineering-related" tabindex="-1">Options - Engineering Related <a class="header-anchor" href="#options-engineering-related" aria-hidden="true">#</a></h1><h2 id="alias" tabindex="-1">alias <a class="header-anchor" href="#alias" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : define commonly used commit message alias</li><li><strong>type</strong> : <code>{ [alias: string]: string }</code></li><li><strong>default</strong> : <code>{ fd: &quot;docs: fix typos&quot; }</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>More usage and demo <a href="/recipes/alias.html">\u21D2 can see the recipes</a></p></div><h2 id="scopes" tabindex="-1">scopes <a class="header-anchor" href="#scopes" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : custom selection <strong>module scope</strong> command line display information</li><li><strong>type</strong> : <code>string[] | Array&lt;{ name: string, value?: string }&gt;</code></li><li><strong>default</strong> : <code>[]</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you define a <code>scope-enum</code> using the <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener noreferrer">commitlint</a> rule, it will be imported automatically.<br><a href="/recipes/#scopes">\u21D2 can see the recipes</a></p></div><h2 id="scopeoverrides" tabindex="-1">scopeOverrides <a class="header-anchor" href="#scopeoverrides" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : After customizing a specific <strong>type</strong>, <strong>override module scope</strong> command line display information</li><li><strong>type</strong> : <br><code>{ [type: string]: string[] | Array&lt;{ name: string, value?: string }&gt; } | undefined</code></li><li><strong>default</strong> : <code>undefined</code></li><li><strong>example</strong> : <code>scopeOverrides: { &quot;test&quot;: [&quot;e2eTest&quot;, &quot;unitTest&quot;] }</code></li><li><strong>use</strong> : Displays custom module scope selection when selecting module scope after selecting <mark>specific</mark> commit <strong>type</strong> : <code>type</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you define <code>scopeOverrides</code> then define generic <code>scopes</code></p></div><h2 id="scopefilters" tabindex="-1">scopeFilters <a class="header-anchor" href="#scopefilters" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : Filter select of prompt to select module scopes by the scope.value</li><li><strong>type</strong> : string[]</li><li><strong>default</strong> : <code>[&quot;.DS_Store&quot;]</code></li></ul><h2 id="enablemultiplescopes" tabindex="-1">enableMultipleScopes <a class="header-anchor" href="#enablemultiplescopes" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : Whether to enable the use of <strong>multiple scopes mode</strong></li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>false</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Try running command to <strong>enable multiple scopes mode in the current session</strong></p><ul><li>Commitizen CLI: <code>checkbox=1 cz</code></li><li>czg CLI: <code>czg checkbox</code> Demo And Usage <a href="/recipes/#support-for-multiple-scopes">\u21D2 see the recipes</a></li></ul></div><h2 id="scopeenumseparator" tabindex="-1">scopeEnumSeparator <a class="header-anchor" href="#scopeenumseparator" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : Separator between <strong>scopes</strong> in multiple scopes mode</li><li><strong>type</strong> : <code>string</code></li><li><strong>default</strong> : <code>,</code></li></ul><h2 id="allowcustomscopes" tabindex="-1">allowCustomScopes <a class="header-anchor" href="#allowcustomscopes" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : whether to display custom options when selecting <strong>module scope</strong> (custom)</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>true</code></li><li><strong>use</strong> : not using <code>commitlint</code> and want to turn off custom options in select.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It will automatically detect whether the definition of the <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener noreferrer">commitlint</a> rule <code>scope-enum</code> is strict, and it will not be displayed automatically.</p></div><h2 id="allowemptyscopes" tabindex="-1">allowEmptyScopes <a class="header-anchor" href="#allowemptyscopes" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : whether to display an empty option when selecting <strong>module scope</strong> (empty)</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>true</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It will automatically detect whether the definition of the <a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noopener noreferrer">commitlint</a> rule <code>scope-empty</code> is strict, and it will not be displayed automatically.</p></div><h2 id="markbreakingchangemode" tabindex="-1">markBreakingChangeMode <a class="header-anchor" href="#markbreakingchangemode" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : Add an extra BREAKINGCHANGE question asking if you need to add the <mark>&quot;!&quot;</mark> mark in the header</li><li><strong>use</strong> : When you want to add the ! mark in the header, Highlight that the commit message belongs to BREAKINGCHANGE. you can use this option.</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>false</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>more usage and demo <a href="/recipes/breakingchange.html">\u21D2 see the recipes</a></p></div><h2 id="allowbreakingchanges" tabindex="-1">allowBreakingChanges <a class="header-anchor" href="#allowbreakingchanges" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : a specific <strong>type</strong> that allows BREAKING CHANGES</li><li><strong>type</strong> : <code>string[]</code></li><li><strong>default</strong> : <code>[&quot;feat&quot;, &quot;fix&quot;]</code></li></ul><h2 id="uppercasesubject" tabindex="-1">upperCaseSubject <a class="header-anchor" href="#uppercasesubject" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : Whether to automatically capitalize the first character of the short description (subject)</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>false</code></li></ul><h2 id="breaklinenumber" tabindex="-1">breaklineNumber <a class="header-anchor" href="#breaklinenumber" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : body and BREAKING CHANGES the line wraps automatically according to the character exceeding this value</li><li><strong>type</strong> : <code>number</code></li><li><strong>default</strong> : <code>100</code></li><li><strong>use</strong> : When commitlint is not used and normalization is to be used</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Line breaks mainly based on <strong>word completeness</strong> <br> If commitlint is used, it will automatically read <code>body-max-line-length</code> and set it.</p></div><h2 id="breaklinechar" tabindex="-1">breaklineChar <a class="header-anchor" href="#breaklinechar" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : newline characters in detailed descriptions (body) and breaking changes (BREAKING CHANGES)</li><li><strong>type</strong> : <code>string</code></li><li><strong>default</strong> : <code>&quot;|&quot;</code></li></ul><h2 id="skipquestions" tabindex="-1">skipQuestions <a class="header-anchor" href="#skipquestions" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : The question specified by the custom selection is not displayed</li><li><strong>type</strong> : <code>Array&lt;&quot;scope&quot; | &quot;body&quot; | &quot;breaking&quot; | &quot;footerPrefix&quot; | &quot;footer&quot;&gt;</code></li><li><strong>default</strong> : <code>[]</code></li></ul><h2 id="issueprefixs" tabindex="-1">issuePrefixs <a class="header-anchor" href="#issueprefixs" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : custom select issue prefix</li><li><strong>type</strong> : <code>Array&lt;{ value: string, name: string }&gt;</code></li><li><strong>default</strong> : <code>[{ value: &quot;closed&quot;, name: &quot;closed: ISSUES has been processed&quot; }]</code></li></ul><h2 id="allowcustomissueprefixs" tabindex="-1">allowCustomIssuePrefixs <a class="header-anchor" href="#allowcustomissueprefixs" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : whether to display custom options when selecting ISSUES prefixs (custom)</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>true</code></li></ul><h2 id="allowemptyissueprefixs" tabindex="-1">allowEmptyIssuePrefixs <a class="header-anchor" href="#allowemptyissueprefixs" aria-hidden="true">#</a></h2><ul><li><strong>description</strong> : whether to display an empty option when selecting ISSUES prefixs (skip)</li><li><strong>type</strong> : <code>boolean</code></li><li><strong>default</strong> : <code>true</code></li></ul><h2 id="maxheaderlength" tabindex="-1">maxHeaderLength <a class="header-anchor" href="#maxheaderlength" aria-hidden="true">#</a></h2><ul><li><strong>description</strong>: Define the length of the header in the commit message, giving the verification information on the command line</li><li><strong>type</strong>: <code>number</code></li><li><strong>default</strong>: <code>Infinity</code></li><li><strong>use</strong> : when commitlint is not used and normalization is to be used</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you use commitlint, it will automatically read <code>header-max-length</code> and set it to give a prompt on the command line</p></div><h2 id="maxsubjectlength" tabindex="-1">maxSubjectLength <a class="header-anchor" href="#maxsubjectlength" aria-hidden="true">#</a></h2><ul><li><strong>description</strong>: Define the length of the subject in the commit message, giving the verification information on the command line</li><li><strong>type</strong>: <code>number</code></li><li><strong>default</strong>: <code>Infinity</code></li><li><strong>use</strong> : When commitlint is not used and normalization is to be used</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If using commitlint will automatically read <code>subject-max-length</code> and set it to give a prompt on the command line.</p></div><h2 id="minsubjectlength" tabindex="-1">minSubjectLength <a class="header-anchor" href="#minsubjectlength" aria-hidden="true">#</a></h2><ul><li><strong>description</strong>: Define the length of the subject in the commit message, giving the verification information on the command line</li><li><strong>type</strong>: <code>number</code></li><li><strong>default</strong> : <code>0</code></li><li><strong>use</strong> : When commitlint is not used and normalization is to be used</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If commitlint is used, it will automatically read <code>subject-min-length</code> and set it to give a prompt on the command line</p></div>',52),n=[l];function a(r,c,d,u,g,p){return t(),o("div",null,n)}var f=e(s,[["render",a]]);export{m as __pageData,f as default};
